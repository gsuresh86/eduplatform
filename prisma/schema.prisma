// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  courses       Course[]
  enrollments   Enrollment[]
  cartItems     CartItem[]
  orders        Order[]
}

enum Role {
  USER
  INSTRUCTOR
  ADMIN
}

model Course {
  id            String    @id @default(cuid())
  title         String
  description   String
  price         Float
  imageUrl      String?
  published     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  authorId      String
  author        User      @relation(fields: [authorId], references: [id])
  lessons       Lesson[]
  enrollments   Enrollment[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  categories    CategoryOnCourse[]
}

model Lesson {
  id            String    @id @default(cuid())
  title         String
  description   String
  content       String
  videoUrl      String?
  position      Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  courseId      String
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Category {
  id            String    @id @default(cuid())
  name          String    @unique
  courses       CategoryOnCourse[]
}

model CategoryOnCourse {
  courseId      String
  categoryId    String
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  category      Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([courseId, categoryId])
}

model Enrollment {
  id            String    @id @default(cuid())
  userId        String
  courseId      String
  enrolledAt    DateTime  @default(now())
  completedAt   DateTime?
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model CartItem {
  id            String    @id @default(cuid())
  userId        String
  courseId      String
  addedAt       DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model Order {
  id            String    @id @default(cuid())
  userId        String
  amount        Float
  status        OrderStatus @default(PENDING)
  paymentIntentId String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems    OrderItem[]
}

model OrderItem {
  id            String    @id @default(cuid())
  orderId       String
  courseId      String
  price         Float
  order         Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  course        Course    @relation(fields: [courseId], references: [id])
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
